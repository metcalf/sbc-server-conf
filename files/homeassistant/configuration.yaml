
# Loads default set of integrations. Do not remove.
default_config:

# Load frontend themes from the themes folder
frontend:
  themes: !include_dir_merge_named themes

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

template:
  - binary_sensor:
    - unique_id: "on_vacation"
      name: "On Vacation"
      state: >
        {{ states.climate.guestbedroom.attributes.target_temp_low == 60 }}
  - sensor:
    - name: "Custom thermostat API data"
      unique_id: "custom_thermostat_api_data"
      state: >
        001
        {{ 1 if is_state('binary_sensor.on_vacation', 'on') else 0 }}
        {{ "{:05.1f}".format(min(999, max(0, states.sensor.most_recent_local_weather.state | float + 100.0))) }}
        {{ "{:010d}".format(states.sensor.most_recent_local_weather.attributes.epoch | int) }}
    - name: "Most Recent Local Weather"
      unique_id: "most_recent_station_weather"
      # If you change this, copy-paste into each `attributes` and change the attribute returned
      state: >
        {% set names = ['sensor.weather_station_KCASANFR1969', 'sensor.weather_station_KCASANFR1831', 'sensor.weather_station_KCASANFR1934'] %}
        {% set sensors = namespace(list=[]) %}
        {% for name in names %}
          {% set sensor_state = states(name) %}
          {% set sensor_epoch = state_attr(name, 'epoch') %}
          {% if sensor_state != 'unknown' and sensor_epoch is not none %}
            {% set sensors.list = sensors.list + [{'epoch': sensor_epoch, 'state': sensor_state}] %}
          {% endif %}
        {% endfor %}
        {% if sensors.list | count > 0 %}
          {% set latest = sensors.list | sort(attribute='epoch') | last %}
          {{ latest.state }}
        {% else %}
          0
        {% endif %}
      attributes:
        epoch: >
          {% set names = ['sensor.weather_station_KCASANFR1969', 'sensor.weather_station_KCASANFR2157', 'sensor.weather_station_KCASANFR2069'] %}
          {% set sensors = namespace(list=[]) %}
          {% for name in names %}
            {% set sensor_state = states(name) %}
            {% set sensor_epoch = state_attr(name, 'epoch') %}
            {% if sensor_state != 'unknown' and sensor_epoch is not none %}
              {% set sensors.list = sensors.list + [{'epoch': sensor_epoch, 'state': sensor_state}] %}
            {% endif %}
          {% endfor %}
          {% if sensors.list | count > 0 %}
            {% set latest = sensors.list | sort(attribute='epoch') | last %}
            {{ latest.epoch }}
          {% else %}
            0
          {% endif %}


sensor:
  - &wunderground_sensor
    platform: rest
    scan_interval: 300
    method: GET
    value_template: "{{ value_json.observations[0].metric.temp }}"
    json_attributes_path: "$.observations[0]"
    json_attributes:
      - epoch
      - humidity
      - uv
      - solarRadiation
    unique_id: "weather_KCASANFR1969"
    name: "Weather Station KCASANFR1969"
    resource: "https://api.weather.com/v2/pws/observations/current?apiKey=e1f10a1e78da46f5b10a1e78da96f525&numericPrecision=decimal&format=json&units=m&stationId=KCASANFR1969"
  - <<: *wunderground_sensor
    unique_id: "weather_KCASANFR2157"
    name: "Weather Station KCASANFR2157"
    resource: "https://api.weather.com/v2/pws/observations/current?apiKey=e1f10a1e78da46f5b10a1e78da96f525&numericPrecision=decimal&format=json&units=m&stationId=KCASANFR2157"
  - <<: *wunderground_sensor
    unique_id: "weather_KCASANFR2069"
    name: "Weather Station KCASANFR2069"
    resource: "https://api.weather.com/v2/pws/observations/current?apiKey=e1f10a1e78da46f5b10a1e78da96f525&numericPrecision=decimal&format=json&units=m&stationId=KCASANFR2069"
